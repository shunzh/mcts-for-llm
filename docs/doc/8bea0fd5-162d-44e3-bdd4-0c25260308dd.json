{
    "summary": "This code provides functions for traversing, extracting decision nodes, and visualizing a decision tree using networkx. It uses pre-order traversal, defines a layout for hierarchical trees, checks if the graph is a tree, and adjusts node positions for proper visualization.",
    "details": [
        {
            "comment": "The code defines functions \"update_root\" and \"pre_order_traverse\". The \"update_root\" function updates the root of a tree-based agent, searching for a state-action pair in the tree. The \"pre_order_traverse\" function performs a pre-order traversal of a game tree, applying different functions to decision nodes and chance nodes depending on their type.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/utils/tree_search_utils.py\":0-35",
            "content": "import random\nimport networkx as nx\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom dyna_gym.agents.mcts import DecisionNode, ChanceNode, chance_node_value\ndef update_root(ag, act, state_p):\n    root_updated = False\n    for chance_node in ag.root.children:\n        if act == chance_node.action:\n            for decision_node in chance_node.children:\n                if decision_node.state == state_p:\n                    ag.root = decision_node\n                    root_updated = True\n                    break\n    if not root_updated:\n        raise Exception(\"root update fails, can't find the next state, action pair in tree.\")\ndef pre_order_traverse(\n        decision_node: DecisionNode,\n        decision_node_fn=lambda n, d: None,\n        chance_node_fn=lambda n, d: None,\n        depth=0):\n    \"\"\"\n    Postorder traversal of the tree rooted at state\n    Apply fn once visited\n    \"\"\"\n    decision_node_fn(decision_node, depth)\n    for chance_node in decision_node.children:\n        chance_node_fn(chance_node, depth)"
        },
        {
            "comment": "This code contains functions for traversing a decision tree, extracting all decision nodes, and visualizing the tree. The `pre_order_traverse` function is used to traverse the tree in pre-order fashion, calling different functions based on the node type. The `get_all_decision_nodes` function collects all decision nodes in the tree. The `print_tree` function prints information about each chance node in the tree. Lastly, the `plot_tree` function plots the entire decision tree using a graph library.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/utils/tree_search_utils.py\":36-69",
            "content": "        for next_decision_node in chance_node.children:\n            pre_order_traverse(next_decision_node, decision_node_fn, chance_node_fn, depth + 1)\ndef get_all_decision_nodes(root: DecisionNode):\n    \"\"\"\n    Get all decision nodes in the tree\n    \"\"\"\n    decision_nodes = []\n    pre_order_traverse(root, decision_node_fn=lambda n, d: decision_nodes.append(n))\n    return decision_nodes\ndef print_tree(root: DecisionNode, tokenizer):\n    def printer(node: ChanceNode, depth):\n        # print the average return of the *parent* of this state\n        # (this is easier to implement than printing all its children nodes)\n        print(\"\\t\" * depth,\n              repr(tokenizer.decode(node.action)),\n              'prob', node.prob,\n              'returns', node.sampled_returns)\n    pre_order_traverse(root, chance_node_fn=printer)\ndef plot_tree(root: DecisionNode, tokenizer, filename):\n    \"\"\"\n    Plot the tree rooted at root\n    \"\"\"\n    # plot the tree\n    G = nx.DiGraph()\n    G.add_node(root.id, label='<PD>')\n    def add_node(node: ChanceNode, depth):"
        },
        {
            "comment": "This code performs a pre-order traversal of the decision tree, adding nodes to a graph and calculating average returns for each node. It then visualizes the graph using networkx and saves it as a PDF file. The code also includes a function to serialize the tree into a JSON object.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/utils/tree_search_utils.py\":70-102",
            "content": "        if len(node.children) > 0:\n            child_id = node.children[0].id\n            parent_id = node.parent.id\n            G.add_node(child_id)\n            avg_return = np.mean(node.sampled_returns)\n            edge_label = f'{repr(tokenizer.decode(node.action))}\\np={node.prob:.2f}\\nR={avg_return:.2f}'\n            G.add_edge(parent_id, child_id, label=edge_label)\n    pre_order_traverse(root, chance_node_fn=add_node)\n    plt.figure(figsize=(15, 15))\n    pos = hierarchy_pos(G, root=root.id)\n    nx.draw(G, pos, with_labels=True)\n    edge_labels = nx.get_edge_attributes(G, 'label')\n    # plot labels on the edges horizontally\n    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, label_pos=0.5, rotate=False)\n    plt.savefig(filename + '.pdf', format=\"pdf\")\n    plt.close()\ndef convert_to_json(root: DecisionNode, env, selected_act):\n    \"\"\"\n    A function to serialize a tree and return a json object\n    \"\"\"\n    ret = []\n    def get_info(node: ChanceNode, depth):\n        if node.action == env.terminal_token:"
        },
        {
            "comment": "This code is performing a pre-order traversal of a tree data structure and returning information about each node. The information includes the token decoded from the node's action, the converted state of the child node (if not a terminal), whether the node's action matches the selected action, the score based on chance node value, and the complete program if applicable. Additionally, there is another function called \"hierarchy_pos\" which seems to be related to plotting positions for a tree using graphviz library but it has been noted that finding a good layout is difficult as of early 2023.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/utils/tree_search_utils.py\":103-126",
            "content": "            # terminal state has no complete_program attribute, since the program is already complete\n            complete_program = env.convert_state_to_program(node.children[0].state)\n        else:\n            complete_program = env.convert_state_to_program(node.children[0].info['complete_program'])\n        info = {'token': env.tokenizer.decode(node.action),\n                'state': env.convert_state_to_program(node.children[0].state),\n                'selected': node.action == selected_act,\n                'score': chance_node_value(node),\n                'complete_program': complete_program}\n        ret.append(info)\n    pre_order_traverse(root, chance_node_fn=get_info)\n    return ret\ndef hierarchy_pos(G, root=None, width=1., vert_gap=0.2, vert_loc=0, leaf_vs_root_factor=0.5):\n    \"\"\"\n    Shun: As of early 2023, I couldn't find a layout in graphviz that plots a tree nicely.\n    So I'm using the following function found in this answer:\n    https://stackoverflow.com/a/29597209/1025757\n    ---\n    If the graph is a tree this will return the positions to plot this in a"
        },
        {
            "comment": "This code is defining a hierarchical layout for a node in a tree, using both top-down and bottom-up approaches. It allocates horizontal space to each node based on the number of its descendants or leaves, depending on the \"leaf_vs_root_factor\" parameter. This method helps in preventing overlapping nodes when some have many descendants.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/utils/tree_search_utils.py\":127-147",
            "content": "    hierarchical layout.\n    Based on Joel's answer at https://stackoverflow.com/a/29597209/2966723,\n    but with some modifications.\n    We include this because it may be useful for plotting transmission trees,\n    and there is currently no networkx equivalent (though it may be coming soon).\n    There are two basic approaches we think of to allocate the horizontal\n    location of a node.\n    - Top down: we allocate horizontal space to a node.  Then its ``k``\n      descendants split up that horizontal space equally.  This tends to result\n      in overlapping nodes when some have many descendants.\n    - Bottom up: we allocate horizontal space to each leaf node.  A node at a\n      higher level gets the entire space allocated to its descendant leaves.\n      Based on this, leaf nodes at higher levels get the same space as leaf\n      nodes very deep in the tree.\n    We use use both of these approaches simultaneously with ``leaf_vs_root_factor``\n    determining how much of the horizontal space is based on the bottom up"
        },
        {
            "comment": "This code checks if the given graph is a tree and throws an error if it's not. If the root node of the tree is not specified, it finds the root either by using topological sorting or choosing a random node. The code ensures the graph is a tree before proceeding to set up position parameters for the hierarchy.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/utils/tree_search_utils.py\":148-179",
            "content": "    or top down approaches.  ``0`` gives pure bottom up, while 1 gives pure top\n    down.\n    :Arguments:\n    **G** the graph (must be a tree)\n    **root** the root node of the tree\n    - if the tree is directed and this is not given, the root will be found and used\n    - if the tree is directed and this is given, then the positions will be\n      just for the descendants of this node.\n    - if the tree is undirected and not given, then a random choice will be used.\n    **width** horizontal space allocated for this branch - avoids overlap with other branches\n    **vert_gap** gap between levels of hierarchy\n    **vert_loc** vertical location of root\n    **leaf_vs_root_factor**\n    xcenter: horizontal location of root\n    \"\"\"\n    if not nx.is_tree(G):\n        raise TypeError('cannot use hierarchy_pos on a graph that is not a tree')\n    if root is None:\n        if isinstance(G, nx.DiGraph):\n            root = next(iter(nx.topological_sort(G)))  # allows back compatibility with nx version 1.11\n        else:\n            root = random.choice(list(G.nodes))"
        },
        {
            "comment": "This function assigns positions to nodes in a tree layout, considering factors like width, leaf position, and parent relationship. It takes a graph (G), root node, leftmost position, width, leaf displacement, vertical gap, and vertical location as input, and returns the positions of all nodes if they have been assigned. If root or leaf positions are not provided, it initializes them accordingly. It handles undirected graphs differently by excluding parent from children list. The function recursively calls itself for each child node to calculate their positions.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/utils/tree_search_utils.py\":181-207",
            "content": "    def _hierarchy_pos(G, root, leftmost, width, leafdx=0.2, vert_gap=0.2, vert_loc=0,\n                       xcenter=0.5, rootpos=None,\n                       leafpos=None, parent=None):\n        '''\n        see hierarchy_pos docstring for most arguments\n        pos: a dict saying where all nodes go if they have been assigned\n        parent: parent of this branch. - only affects it if non-directed\n        '''\n        if rootpos is None:\n            rootpos = {root: (xcenter, vert_loc)}\n        else:\n            rootpos[root] = (xcenter, vert_loc)\n        if leafpos is None:\n            leafpos = {}\n        children = list(G.neighbors(root))\n        leaf_count = 0\n        if not isinstance(G, nx.DiGraph) and parent is not None:\n            children.remove(parent)\n        if len(children) != 0:\n            rootdx = width / len(children)\n            nextx = xcenter - width / 2 - rootdx / 2\n            for child in children:\n                nextx += rootdx\n                rootpos, leafpos, newleaves = _hierarchy_pos(G, child, leftmost + leaf_count * leafdx,"
        },
        {
            "comment": "This code calculates the position of a tree node based on its children and their positions, considering leaf nodes as well. It updates leaf_count and leafpos dictionary for the root node if it has any children; otherwise, it sets leaf_count to 1 and calculates leftmost and rightmost child positions to determine the root's position. If the graph is a directed graph, it counts the number of leaf nodes as leaf_count.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/utils/tree_search_utils.py\":208-226",
            "content": "                                                             width=rootdx, leafdx=leafdx,\n                                                             vert_gap=vert_gap, vert_loc=vert_loc - vert_gap,\n                                                             xcenter=nextx, rootpos=rootpos, leafpos=leafpos,\n                                                             parent=root)\n                leaf_count += newleaves\n            leftmostchild = min((x for x, y in [leafpos[child] for child in children]))\n            rightmostchild = max((x for x, y in [leafpos[child] for child in children]))\n            leafpos[root] = ((leftmostchild + rightmostchild) / 2, vert_loc)\n        else:\n            leaf_count = 1\n            leafpos[root] = (leftmost, vert_loc)\n        #        pos[root] = (leftmost + (leaf_count-1)*dx/2., vert_loc)\n        #        print(leaf_count)\n        return rootpos, leafpos, leaf_count\n    xcenter = width / 2.\n    if isinstance(G, nx.DiGraph):\n        leafcount = len([node for node in nx.descendants(G, root) if G.out_degree(node) == 0])"
        },
        {
            "comment": "This code snippet checks if the input graph G is a networkx Graph, then determines the number of leaf nodes in a connected component and calculates their position relative to root nodes. It adjusts the x-coordinates of all node positions based on the width and maximum x value for proper visualization.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/utils/tree_search_utils.py\":227-242",
            "content": "    elif isinstance(G, nx.Graph):\n        leafcount = len([node for node in nx.node_connected_component(G, root) if G.degree(node) == 1 and node != root])\n    rootpos, leafpos, leaf_count = _hierarchy_pos(G, root, 0, width,\n                                                  leafdx=width * 1. / leafcount,\n                                                  vert_gap=vert_gap,\n                                                  vert_loc=vert_loc,\n                                                  xcenter=xcenter)\n    pos = {}\n    for node in rootpos:\n        pos[node] = (\n        leaf_vs_root_factor * leafpos[node][0] + (1 - leaf_vs_root_factor) * rootpos[node][0], leafpos[node][1])\n    #    pos = {node:(leaf_vs_root_factor*x1+(1-leaf_vs_root_factor)*x2, y1) for ((x1,y1), (x2,y2)) in (leafpos[node], rootpos[node]) for node in rootpos}\n    xmax = max(x for x, y in pos.values())\n    for node in pos:\n        pos[node] = (pos[node][0] * width / xmax, pos[node][1])\n    return pos"
        }
    ]
}