{
    "summary": "The code defines a UCT agent for Dyna-Gym library using Monte Carlo Tree Search (MCTS) for decision-making with discrete and continuous action spaces. It includes reset, display, and UCB calculation methods, along with an 'act' method that performs MCTS to select optimal actions in the environment.",
    "details": [
        {
            "comment": "The code above defines a UCT agent for the Dyna-Gym library. It takes various parameters such as action_space, rollouts, horizon, gamma, ucb_constant, ucb_base, is_model_dynamic, width, default_policy, ts_mode, reuse_tree, alg, lambda_coeff, and value_func. The UCT agent uses Monte Carlo Tree Search to make decisions in the environment. It also requires certain features from the environment such as state, action space, transition function, and equality operator.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/agents/uct.py\":0-41",
            "content": "\"\"\"\nUCT Algorithm\nRequired features of the environment:\nenv.state\nenv.action_space\nenv.transition(s, a, is_model_dynamic)\nenv.equality_operator(s1, s2)\n\"\"\"\nimport dyna_gym.agents.mcts as mcts\nfrom dyna_gym.utils.utils import combinations\nfrom math import sqrt, log\nfrom gym import spaces\nclass UCT(object):\n    \"\"\"\n    UCT agent\n    \"\"\"\n    def __init__(\n            self,\n            action_space=[],\n            rollouts=100,\n            horizon=100,\n            gamma=0.9,\n            ucb_constant=6.36396103068,\n            ucb_base=50.,\n            is_model_dynamic=True,\n            width=None,\n            default_policy=None,\n            ts_mode='sample',\n            reuse_tree=False,\n            alg='uct',\n            lambda_coeff=0.,\n            value_func=None,\n    ):\n        \"\"\"\n        Args:\n            action_space: action space of the environment\n            rollouts: total number of rollouts (the number of loops over selection, expansion, simulation and backpropagation)\n            horizon: maximum length of the rollouts"
        },
        {
            "comment": "This code initializes a UCT agent's parameters, including the action space, number of rollouts, horizon, and discount factor. It also determines the algorithm to use based on the input arguments. The code handles discrete and continuous action spaces differently, creating lists of combinations for discrete spaces and directly assigning continuous spaces.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/agents/uct.py\":42-59",
            "content": "            gamma: discount factor\n            ucb_constant: constant for the UCB exploration\n            ucb_base: base for the UCB exploration, only used in var_p_uct\n            is_model_dynamic: whether the model is dynamic\n            width: number of children for each node, default is num of actions\n            default_policy: an optional default policy that returns a most-likely sequence and top-k most-likely next tokens\n            ts_mode: the mode for tree search, can be 'sample', 'best'\n            reuse_tree: whether to reuse the tree from the previous step if the algorithm is called multiple times\n            alg: exact UCT algorithm to use, can be 'uct', 'p_uct', 'var_p_uct'\n        \"\"\"\n        if type(action_space) == spaces.discrete.Discrete:\n            self.action_space = list(combinations(action_space))\n        else:\n            self.action_space = action_space\n        self.n_actions = len(self.action_space)\n        self.rollouts = rollouts\n        self.horizon = horizon\n        self.gamma = gamma"
        },
        {
            "comment": "The code defines a UCT agent class with various parameters such as ucb_constant, is_model_dynamic, width, default_policy, ts_mode, reuse_tree, act_selection_criteria. It also includes methods reset and display for initializing and displaying information about the agent's attributes.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/agents/uct.py\":60-93",
            "content": "        self.ucb_constant = ucb_constant\n        self.is_model_dynamic = is_model_dynamic\n        # the number of children for each node, default is num of actions\n        self.width = width or self.n_actions\n        self.default_policy = default_policy\n        self.ts_mode = ts_mode\n        self.reuse_tree = reuse_tree\n        act_selection_criteria = {\n            'uct': self.ucb,\n            'p_uct': self.p_ucb,\n            'var_p_uct': self.var_p_ucb\n        }\n        if alg in ['uct', 'p_uct', 'var_p_uct']:\n            self.tree_policy = lambda children: max(children, key=act_selection_criteria[alg])\n            if alg == 'var_p_uct':\n                self.ucb_base = ucb_base\n        else:\n            raise Exception(f'unknown uct alg {alg}')\n        self.lambda_coeff = lambda_coeff\n        self.value_func = value_func\n        self.reset()\n    def reset(self):\n        self.root = None\n        self.rolled_out_trajectories = []\n        self.rolled_out_rewards = []\n    def display(self):\n        \"\"\"\n        Display infos about the attributes."
        },
        {
            "comment": "This code defines an agent using the Upper Confidence Bound (UCB) algorithm for Monte Carlo Tree Search (MCTS). The agent has methods to calculate UCB and weighted UCB for chance nodes. It also includes parameters such as number of actions, rollouts, horizon, gamma, and is_model_dynamic.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/agents/uct.py\":94-121",
            "content": "        \"\"\"\n        print('Displaying UCT agent:')\n        print('Number of actions  :', self.n_actions)\n        print('Rollouts           :', self.rollouts)\n        print('Horizon            :', self.horizon)\n        print('Gamma              :', self.gamma)\n        print('UCB constant       :', self.ucb_constant)\n        print('Is model dynamic   :', self.is_model_dynamic)\n        print('Expansion Width    :', self.width)\n        print()\n    def ucb(self, node):\n        \"\"\"\n        Upper Confidence Bound of a chance node\n        \"\"\"\n        return mcts.chance_node_value(node)\\\n            + self.ucb_constant * sqrt(log(node.parent.visits)) / (1 + len(node.sampled_returns))\n    def p_ucb(self, node):\n        \"\"\"\n        Upper Confidence Bound of a chance node, weighted by prior probability\n        \"\"\"\n        return mcts.chance_node_value(node)\\\n            + self.ucb_constant * node.prob * sqrt(log(node.parent.visits)) / (1 + len(node.sampled_returns))\n    def var_p_ucb(self, node):\n        \"\"\"\n        Upper Confidence Bound of a chance node, the ucb exploration weight is a variable"
        },
        {
            "comment": "This code defines an 'act' method for a UCT agent, which performs the Monte Carlo Tree Search (MCTS) algorithm to select an optimal action in the environment. The method takes in an environment and done condition as input parameters, and returns the optimal action. It also initializes or reuses the tree based on the 'reuse_tree' flag, and utilizes a 'tree_policy' for the search process.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/dyna_gym/agents/uct.py\":122-130",
            "content": "        \"\"\"\n        ucb_parameter = log((node.parent.visits + self.ucb_base + 1) / self.ucb_base) + self.ucb_constant\n        return mcts.chance_node_value(node)\\\n            + ucb_parameter * node.prob * sqrt(log(node.parent.visits)) / (1 + len(node.sampled_returns))\n    def act(self, env, done, term_cond=None):\n        root = self.root if self.reuse_tree else None\n        opt_act, self.root = mcts.mcts_procedure(self, self.tree_policy, env, done, root=root, term_cond=term_cond)\n        return opt_act"
        }
    ]
}