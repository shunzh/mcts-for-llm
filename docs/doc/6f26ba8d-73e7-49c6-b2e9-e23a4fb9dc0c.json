{
    "summary": "The code sets up a Monte Carlo Tree Search (MCTS) agent to play the \"NSCartPole-v0\" game environment from OpenAI Gym, and runs the MCTS algorithm for 100 timesteps. It also has options for verbose output and rendering. If the episode ends before 100 timesteps, it prints how many timesteps it took to finish the episode.",
    "details": [
        {
            "comment": "The code sets up a Monte Carlo Tree Search (MCTS) agent to play the \"NSCartPole-v0\" game environment from OpenAI Gym, and runs the MCTS algorithm for 100 timesteps. It also has options for verbose output and rendering. If the episode ends before 100 timesteps, it prints how many timesteps it took to finish the episode.",
            "location": "\"/media/root/Prima/works/mcts-for-llm/docs/src/examples/mcts_nscartpole_v0.py\":0-21",
            "content": "import gym\nimport dyna_gym.agents.mcts as mcts\n### Parameters\nenv = gym.make('NSCartPole-v0')\nagent = mcts.MCTS(action_space=env.action_space)\ntimesteps = 100\nverbose = False\n### Run\nenv.reset()\ndone = False\nfor ts in range(timesteps):\n    __, __, done, __ = env.step(agent.act(env,done))\n    if verbose:\n        env.print_state()\n    env.render()\n    if ts+1 == timesteps:\n        print(\"Successfully reached end of episode ({} timesteps)\".format(ts+1))\n    if done:\n        print(\"Episode finished after {} timesteps\".format(ts+1))\n        break"
        }
    ]
}