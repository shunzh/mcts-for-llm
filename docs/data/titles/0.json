{
    "/README.md": "Dyna-Gym: MCTS for Large Language Model Decoding",
    "/README.md:1-33": "Monte-Carlo Tree Search for LLM Decoding",
    "/README.md:35-39": "Python UCT Algorithm in CartPole Environment",
    "/dyna_gym/__init__.py": "DynaGym Language Environments",
    "/dyna_gym/__init__.py:1-65": "DynaGym Task Registration",
    "/dyna_gym/__init__.py:66-71": "DynaGym: LanguageEnv Registration",
    "/dyna_gym/agents/mcts.py": "Dyna-Gym MCTS Reinforcement Learning Agent",
    "/dyna_gym/agents/mcts.py:1-40": "Monte Carlo Tree Search Agent Algorithm",
    "/dyna_gym/agents/mcts.py:111-133": "Monte Carlo Tree Search in Dyna-Gym Environment",
    "/dyna_gym/agents/mcts.py:135-166": "Backpropagation of Rewards in MCTS Agent",
    "/dyna_gym/agents/mcts.py:167-189": "Create Monte Carlo Tree Search Decision Node",
    "/dyna_gym/agents/mcts.py:190-222": "MCTS Agent Reinforcement Learning Class",
    "/dyna_gym/agents/mcts.py:223-244": "MCTS Agent Class: Optimal Actions with Attributes",
    "/dyna_gym/agents/mcts.py:41-64": "MCTS Agent Rollout Initialization",
    "/dyna_gym/agents/mcts.py:65-85": "Monte Carlo Tree Search Algorithm",
    "/dyna_gym/agents/mcts.py:86-110": "MCTS Agent: Node Expansion and Evaluation",
    "/dyna_gym/agents/my_random_agent.py": "Random Agent in DynaGym",
    "/dyna_gym/agents/uct.py": "UCT Agent for Dyna-Gym with MCTS",
    "/dyna_gym/agents/uct.py:1-42": "Dyna-Gym UCT Agent: Monte Carlo Tree Search",
    "/dyna_gym/agents/uct.py:123-131": "UCT Agent's MCTS for Optimal Action Selection",
    "/dyna_gym/agents/uct.py:43-60": "UCT Agent Parameter Initialization",
    "/dyna_gym/agents/uct.py:61-94": "UCT Agent Class Definition",
    "/dyna_gym/agents/uct.py:95-122": "UCB Agent for Monte Carlo Tree Search",
    "/dyna_gym/default_policy/default_policy.py": "Default Policy: Get Predicted Sequence and Top K Tokens",
    "/dyna_gym/default_policy/hf_default_policy.py": "Transformer-Based Gym Decision Making",
    "/dyna_gym/default_policy/hf_default_policy.py:1-38": "HuggingFace Default Policy: Gym Decision Making",
    "/dyna_gym/default_policy/hf_default_policy.py:39-72": "Defining Functions for State Generation and Token Retrieval",
    "/dyna_gym/default_policy/hf_default_policy.py:74-90": "Top K Probability Token Selection",
    "/dyna_gym/envs/language_env.py": "LanguageEnv: Gym for Language Generation with MCTS",
    "/dyna_gym/envs/language_env.py:1-32": "LanguageEnv: Gym for Language Generation",
    "/dyna_gym/envs/language_env.py:34-60": "Monte Carlo Tree Search Language Model",
    "/dyna_gym/envs/language_env.py:62-66": "Function: Return State, Reward, and Done\nTitle: State-Reward-Done Function",
    "/dyna_gym/pipelines/__init__.py": "Dyna-Gym Reinforcement Learning with HF Transformers",
    "/dyna_gym/pipelines/uct_for_hf_transformer.py": "UCT Agent for Hugging Face Transformers",
    "/dyna_gym/pipelines/uct_for_hf_transformer.py:1-31": "UCT Agent for Transformers: Reward-based Sequence Generation",
    "/dyna_gym/pipelines/uct_for_hf_transformer.py:32-57": "UCT Agent Dynamic Environment Initialization",
    "/dyna_gym/pipelines/uct_for_hf_transformer.py:58-89": "UCT Agent Initialization and Action Tree",
    "/dyna_gym/pipelines/uct_for_hf_transformer.py:90-110": "UCT-based HF Transformer Selection",
    "/dyna_gym/utils/benchmark.py": "Multithreaded Agent Performance Benchmark",
    "/dyna_gym/utils/benchmark.py:1-44": "Run Episode in Environment Function",
    "/dyna_gym/utils/benchmark.py:100-119": "Multithreaded Agent Benchmarking with CSV Output",
    "/dyna_gym/utils/benchmark.py:120-140": "Benchmarking Agents with Parallel Multi-Threading",
    "/dyna_gym/utils/benchmark.py:141-168": "Multi-Agent Benchmarking Tool",
    "/dyna_gym/utils/benchmark.py:169-202": "Single-Thread UCT & Random Agent Benchmarking",
    "/dyna_gym/utils/benchmark.py:203-226": "Benchmarking Dyna-Gym Agents: UCT vs. MyRandomAgent",
    "/dyna_gym/utils/benchmark.py:45-63": "Multi-Agent Benchmarking in Single Environment",
    "/dyna_gym/utils/benchmark.py:64-84": "Initialize Agents for Environments",
    "/dyna_gym/utils/benchmark.py:85-99": "Episode-wise Agent Benchmarking with Env Reset",
    "/dyna_gym/utils/distribution.py": "1-Wasserstein Distance Calculator and Distribution Generator",
    "/dyna_gym/utils/distribution.py:1-38": "Wasserstein Distance Functions",
    "/dyna_gym/utils/distribution.py:100-125": "Optimizing Distribution with Anonymous Function",
    "/dyna_gym/utils/distribution.py:39-67": "Distribution and Constrained Random Generation",
    "/dyna_gym/utils/distribution.py:68-99": "Distribution Cleaning and Worst-case Creation",
    "/dyna_gym/utils/tree_search_utils.py": "Decision Tree Visualization with NetworkX",
    "/dyna_gym/utils/tree_search_utils.py:1-36": "Tree Search Utilities: Update Root and Pre-order Traverse",
    "/dyna_gym/utils/tree_search_utils.py:104-127": "Tree Search Utils: Pre-Order Traversal and Plotting",
    "/dyna_gym/utils/tree_search_utils.py:128-148": "Hierarchical Tree Layout Algorithm",
    "/dyna_gym/utils/tree_search_utils.py:149-180": "Checks if Graph is a Tree and Sets Position Parameters",
    "/dyna_gym/utils/tree_search_utils.py:182-208": "Tree Layout Node Positioning",
    "/dyna_gym/utils/tree_search_utils.py:209-227": "Tree Node Position Calculator",
    "/dyna_gym/utils/tree_search_utils.py:228-243": "Adjusting Node Positions in Networkx Graphs",
    "/dyna_gym/utils/tree_search_utils.py:37-70": "Decision Tree Traversal and Visualization",
    "/dyna_gym/utils/tree_search_utils.py:71-103": "Pre-Order Tree Traversal with Graph Visualization",
    "/dyna_gym/utils/utils.py": "Data Utilities in dyna_gym",
    "/dyna_gym/utils/utils.py:1-30": "Utility Functions for Data Handling and Assertion",
    "/dyna_gym/utils/utils.py:32-56": "Amax, Combinations, and Multigpu Breakpoint Utilities",
    "/examples/mcts_nscartpole_v0.py": "Monte Carlo Tree Search for CartPole Game",
    "/examples/random_nscartpole_v0.py": "Random Agent and Environment Exploration",
    "/examples/uct_language_alignment.py": "UCT-based Language Alignment Model",
    "/examples/uct_language_alignment.py:1-41": "UCT Language Alignment with Sentiment Analysis",
    "/examples/uct_language_alignment.py:42-56": "Monte Carlo Tree Search for Language Alignment",
    "/examples/uct_nscartpole_v0.py": "UCT Agent Controls CartPole in Python",
    "/examples/uct_nscartpole_v1.py": "Dynamic UCT Agent in CartPole Environment",
    "/examples/uct_nscartpole_v2.py": "UCT Agent for NSCartPole-v2 Environment",
    "/setup.py": "Dyna Gym Setup Script"
}