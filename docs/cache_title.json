{"_default": {"1": {"path": "/README.md", "hash": "2e7d03c98b6c52fdfd9bace3579c775e", "title": "Dyna-Gym: MCTS for Large Language Model Decoding"}, "2": {"path": "/README.md:1-33", "hash": "e37a7547f58f6c947fda60996d6685d2", "title": "Monte-Carlo Tree Search for LLM Decoding"}, "3": {"path": "/README.md:35-39", "hash": "938999ded49a2cbc261973fa1dd42ea9", "title": "Python UCT Algorithm in CartPole Environment"}, "4": {"path": "/dyna_gym/__init__.py", "hash": "ae195413ff6c54f8f504a4abafba7043", "title": "DynaGym Language Environments"}, "5": {"path": "/dyna_gym/__init__.py:1-65", "hash": "f914b40f9f615b69dff154296e75474a", "title": "DynaGym Task Registration"}, "6": {"path": "/dyna_gym/__init__.py:66-71", "hash": "7d6e30af516acfb8b407d30bd7ad1300", "title": "DynaGym: LanguageEnv Registration"}, "7": {"path": "/dyna_gym/agents/mcts.py", "hash": "bf6640a8598fdde6f9c64c14a890f71c", "title": "Dyna-Gym MCTS Reinforcement Learning Agent"}, "8": {"path": "/dyna_gym/agents/mcts.py:1-40", "hash": "f447044f7cb3cb24a31a45a62fa215b0", "title": "Monte Carlo Tree Search Agent Algorithm"}, "9": {"path": "/dyna_gym/agents/mcts.py:41-64", "hash": "2e95a7a244b077b251f01ba6445df433", "title": "MCTS Agent Rollout Initialization"}, "10": {"path": "/dyna_gym/agents/mcts.py:65-85", "hash": "2534c125e543d1ba60c4ed10a2629cb2", "title": "Monte Carlo Tree Search Algorithm"}, "11": {"path": "/dyna_gym/agents/mcts.py:86-110", "hash": "71d416700441e55a13184f0ef01c37af", "title": "MCTS Agent: Node Expansion and Evaluation"}, "12": {"path": "/dyna_gym/agents/mcts.py:111-133", "hash": "5da9cb8a7d45dd0ea45e9d077869f8e0", "title": "Monte Carlo Tree Search in Dyna-Gym Environment"}, "13": {"path": "/dyna_gym/agents/mcts.py:135-166", "hash": "93f60bf467694826a6daec39418b597f", "title": "Backpropagation of Rewards in MCTS Agent"}, "14": {"path": "/dyna_gym/agents/mcts.py:167-189", "hash": "173d20b0debd77f080fc213f37d88f99", "title": "Create Monte Carlo Tree Search Decision Node"}, "15": {"path": "/dyna_gym/agents/mcts.py:190-222", "hash": "d6c5eb629b8dd19aed8242ee2a298f89", "title": "MCTS Agent Reinforcement Learning Class"}, "16": {"path": "/dyna_gym/agents/mcts.py:223-244", "hash": "7ee83cb3abc8fc90fd3d73175e3eaf40", "title": "MCTS Agent Class: Optimal Actions with Attributes"}, "17": {"path": "/dyna_gym/agents/my_random_agent.py", "hash": "91ed53fe71f80c847679c4050efed0d5", "title": "Random Agent in DynaGym"}, "18": {"path": "/dyna_gym/agents/uct.py", "hash": "b06864a53041e14a8082b1228dab8e63", "title": "UCT Agent for Dyna-Gym with MCTS"}, "19": {"path": "/dyna_gym/agents/uct.py:1-42", "hash": "47fdeb3085aa7ef88cf193d31237b0eb", "title": "Dyna-Gym UCT Agent: Monte Carlo Tree Search"}, "20": {"path": "/dyna_gym/agents/uct.py:43-60", "hash": "721fa848aeed60799c7e60146fe3ab05", "title": "UCT Agent Parameter Initialization"}, "21": {"path": "/dyna_gym/agents/uct.py:61-94", "hash": "4ddc84904bf34489311508a831f25db0", "title": "UCT Agent Class Definition"}, "22": {"path": "/dyna_gym/agents/uct.py:95-122", "hash": "49364cab87f5ad41f91e020ffe1da6a7", "title": "UCB Agent for Monte Carlo Tree Search"}, "23": {"path": "/dyna_gym/agents/uct.py:123-131", "hash": "a6d03dffd513988ca7dee59665df6ad2", "title": "UCT Agent's MCTS for Optimal Action Selection"}, "24": {"path": "/dyna_gym/default_policy/default_policy.py", "hash": "f4ade3d7e1b0a590952a4d36fc4d9391", "title": "Default Policy: Get Predicted Sequence and Top K Tokens"}, "25": {"path": "/dyna_gym/default_policy/hf_default_policy.py", "hash": "2dbdafc421d2c44d168083fc3e383bb0", "title": "Transformer-Based Gym Decision Making"}, "26": {"path": "/dyna_gym/default_policy/hf_default_policy.py:1-38", "hash": "df68626fd20ab042febcb2332e44659c", "title": "HuggingFace Default Policy: Gym Decision Making"}, "27": {"path": "/dyna_gym/default_policy/hf_default_policy.py:39-72", "hash": "eeb67c462bcd126feb866801aee98b9d", "title": "Defining Functions for State Generation and Token Retrieval"}, "28": {"path": "/dyna_gym/default_policy/hf_default_policy.py:74-90", "hash": "eb91c16b79790836e1fc50805d349efa", "title": "Top K Probability Token Selection"}, "29": {"path": "/dyna_gym/envs/language_env.py", "hash": "43cacf594c24cea4cdb1dd30aaf48857", "title": "LanguageEnv: Gym for Language Generation with MCTS"}, "30": {"path": "/dyna_gym/envs/language_env.py:1-32", "hash": "ec51ab3d15817a644107f695d341cd0c", "title": "LanguageEnv: Gym for Language Generation"}, "31": {"path": "/dyna_gym/envs/language_env.py:34-60", "hash": "d0a22826b2b53d01c92caa4bff78f535", "title": "Monte Carlo Tree Search Language Model"}, "32": {"path": "/dyna_gym/envs/language_env.py:62-66", "hash": "bb619c0e61dcb3c64b8ddfef80e6fd7a", "title": "Function: Return State, Reward, and Done\nTitle: State-Reward-Done Function"}, "33": {"path": "/dyna_gym/pipelines/__init__.py", "hash": "383e08962b63850d08200075b40efc8d", "title": "Dyna-Gym Reinforcement Learning with HF Transformers"}, "34": {"path": "/dyna_gym/pipelines/uct_for_hf_transformer.py", "hash": "7345014f4506505c8913e525cc830fe1", "title": "UCT Agent for Hugging Face Transformers"}, "35": {"path": "/dyna_gym/pipelines/uct_for_hf_transformer.py:1-31", "hash": "9c11923a6bb22e82d048be25cc0ec500", "title": "UCT Agent for Transformers: Reward-based Sequence Generation"}, "36": {"path": "/dyna_gym/pipelines/uct_for_hf_transformer.py:32-57", "hash": "01cb62de87f8a62820a87e8e6ac2645b", "title": "UCT Agent Dynamic Environment Initialization"}, "37": {"path": "/dyna_gym/pipelines/uct_for_hf_transformer.py:58-89", "hash": "ba7cd1c82b9e35476e50ee2fb49f9b92", "title": "UCT Agent Initialization and Action Tree"}, "38": {"path": "/dyna_gym/pipelines/uct_for_hf_transformer.py:90-110", "hash": "eaadb9acd950c48190b661fa44afb83f", "title": "UCT-based HF Transformer Selection"}, "39": {"path": "/dyna_gym/utils/benchmark.py", "hash": "08b35f6204aa77b33ccc6b249c24fe82", "title": "Multithreaded Agent Performance Benchmark"}, "40": {"path": "/dyna_gym/utils/benchmark.py:1-44", "hash": "abab43f0dad9958548df463ccbfb466a", "title": "Run Episode in Environment Function"}, "41": {"path": "/dyna_gym/utils/benchmark.py:45-63", "hash": "aedf2651c500e0ecb0e52c0ab2d29037", "title": "Multi-Agent Benchmarking in Single Environment"}, "42": {"path": "/dyna_gym/utils/benchmark.py:64-84", "hash": "44eabad89b7f73e29fac96b71a6bbe79", "title": "Initialize Agents for Environments"}, "43": {"path": "/dyna_gym/utils/benchmark.py:85-99", "hash": "32a9a7e59214072049e91c38f26b255d", "title": "Episode-wise Agent Benchmarking with Env Reset"}, "44": {"path": "/dyna_gym/utils/benchmark.py:100-119", "hash": "72c11a5dc5e087140403c60ccad1e317", "title": "Multithreaded Agent Benchmarking with CSV Output"}, "45": {"path": "/dyna_gym/utils/benchmark.py:120-140", "hash": "72bdcdcfec33603dc03fc86301af61e3", "title": "Benchmarking Agents with Parallel Multi-Threading"}, "46": {"path": "/dyna_gym/utils/benchmark.py:141-168", "hash": "3c198bdc7d19d5e1b7924e3a19a96b1c", "title": "Multi-Agent Benchmarking Tool"}, "47": {"path": "/dyna_gym/utils/benchmark.py:169-202", "hash": "1d0ec23a10b40d26a0006e78d4b05241", "title": "Single-Thread UCT & Random Agent Benchmarking"}, "48": {"path": "/dyna_gym/utils/benchmark.py:203-226", "hash": "0f298d12da98e25dc7d46536741221ee", "title": "Benchmarking Dyna-Gym Agents: UCT vs. MyRandomAgent"}, "49": {"path": "/dyna_gym/utils/distribution.py", "hash": "76bffd8e7f306dc4399f363b77ed561f", "title": "1-Wasserstein Distance Calculator and Distribution Generator"}, "50": {"path": "/dyna_gym/utils/distribution.py:1-38", "hash": "6909457a9a19b0235c18b2d1096ab881", "title": "Wasserstein Distance Functions"}, "51": {"path": "/dyna_gym/utils/distribution.py:39-67", "hash": "2c3e8573b68923a382a61679494d5702", "title": "Distribution and Constrained Random Generation"}, "52": {"path": "/dyna_gym/utils/distribution.py:68-99", "hash": "d799b8bcf04ed539db429bc07d7eee4f", "title": "Distribution Cleaning and Worst-case Creation"}, "53": {"path": "/dyna_gym/utils/distribution.py:100-125", "hash": "d81330e2ee1a6362a10634e9587615ec", "title": "Optimizing Distribution with Anonymous Function"}, "54": {"path": "/dyna_gym/utils/tree_search_utils.py", "hash": "9027f05914d5522b3b0765fe9a70cfe6", "title": "Decision Tree Visualization with NetworkX"}, "55": {"path": "/dyna_gym/utils/tree_search_utils.py:1-36", "hash": "933a4c45f9c0f9c139b27b1b298ac2eb", "title": "Tree Search Utilities: Update Root and Pre-order Traverse"}, "56": {"path": "/dyna_gym/utils/tree_search_utils.py:37-70", "hash": "da70225af852a5b4680112e5206a161b", "title": "Decision Tree Traversal and Visualization"}, "57": {"path": "/dyna_gym/utils/tree_search_utils.py:71-103", "hash": "4157ddf03b45223e9e43a59ad4ade268", "title": "Pre-Order Tree Traversal with Graph Visualization"}, "58": {"path": "/dyna_gym/utils/tree_search_utils.py:104-127", "hash": "b6781f05ce63753c08819e1ce1672202", "title": "Tree Search Utils: Pre-Order Traversal and Plotting"}, "59": {"path": "/dyna_gym/utils/tree_search_utils.py:128-148", "hash": "73a76b4fed09daea06593ef53b25f002", "title": "Hierarchical Tree Layout Algorithm"}, "60": {"path": "/dyna_gym/utils/tree_search_utils.py:149-180", "hash": "e8248467f434c5d2abf559a46aa6022c", "title": "Checks if Graph is a Tree and Sets Position Parameters"}, "61": {"path": "/dyna_gym/utils/tree_search_utils.py:182-208", "hash": "cc38676f85618ec19e4da33b1154aec5", "title": "Tree Layout Node Positioning"}, "62": {"path": "/dyna_gym/utils/tree_search_utils.py:209-227", "hash": "bd0d5bb1f65fd0e6bfe837b50c0ff2d8", "title": "Tree Node Position Calculator"}, "63": {"path": "/dyna_gym/utils/tree_search_utils.py:228-243", "hash": "3deff870c3975ece6a40de45a10348f2", "title": "Adjusting Node Positions in Networkx Graphs"}, "64": {"path": "/dyna_gym/utils/utils.py", "hash": "81e077bc65650cb712432699ede122fc", "title": "Data Utilities in dyna_gym"}, "65": {"path": "/dyna_gym/utils/utils.py:1-30", "hash": "72358af7d0398773676918f5f00731c8", "title": "Utility Functions for Data Handling and Assertion"}, "66": {"path": "/dyna_gym/utils/utils.py:32-56", "hash": "f0b777c63f27a011a906df14c97796ab", "title": "Amax, Combinations, and Multigpu Breakpoint Utilities"}, "67": {"path": "/examples/mcts_nscartpole_v0.py", "hash": "42740cde791c0118ddeb52ee86b320da", "title": "Monte Carlo Tree Search for CartPole Game"}, "68": {"path": "/examples/random_nscartpole_v0.py", "hash": "35bdfcb2476c170d3c8da2dcbfccce94", "title": "Random Agent and Environment Exploration"}, "69": {"path": "/examples/uct_language_alignment.py", "hash": "63dcc9ed08438641f850e6bfc694bb8f", "title": "UCT-based Language Alignment Model"}, "70": {"path": "/examples/uct_language_alignment.py:1-41", "hash": "fe5e9308c4b8feb91775a674bec013d3", "title": "UCT Language Alignment with Sentiment Analysis"}, "71": {"path": "/examples/uct_language_alignment.py:42-56", "hash": "374decc127afde28d6612a3e8281c58c", "title": "Monte Carlo Tree Search for Language Alignment"}, "72": {"path": "/examples/uct_nscartpole_v0.py", "hash": "6e0471ae6afd7fd79ef3475128f78873", "title": "UCT Agent Controls CartPole in Python"}, "73": {"path": "/examples/uct_nscartpole_v1.py", "hash": "df9340ff6414914defa58c05e9646da4", "title": "Dynamic UCT Agent in CartPole Environment"}, "74": {"path": "/examples/uct_nscartpole_v2.py", "hash": "81325e76111cf3045b004a899bfb3515", "title": "UCT Agent for NSCartPole-v2 Environment"}, "75": {"path": "/setup.py", "hash": "39808a34d705129ab76a2b4074fe4e58", "title": "Dyna Gym Setup Script"}}}